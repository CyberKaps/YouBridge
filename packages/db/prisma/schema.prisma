// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// Defines the possible roles for a user.
// Using an enum prevents errors from typos (e.g., "EDTIOR").
enum Role {
  EDITOR
  YOUTUBER
}

// Defines the possible states for a video in its lifecycle.
enum VideoStatus {
  PENDING
  APPROVED
  PUBLISHED
  REJECTED
}

// Represents a user account in the system.
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      Role

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // This creates a one-to-many relationship:
  // One user can have many videos.
  videos    Video[]
}

// Represents a video uploaded by an Editor.
model Video {
  id          String      @id @default(cuid())
  title       String
  description String?     // The '?' makes this field optional.
  s3Key       String      @unique // The unique filename/key in your file storage (e.g., AWS S3).

  status      VideoStatus @default(PENDING) // A new video always starts as PENDING.

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // This defines the other side of the relationship:
  // A video belongs to one user.
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String      // This is the foreign key that links to the User's id.
}